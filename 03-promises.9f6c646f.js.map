{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAgBA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAACN,E,MAAUC,IAEnBM,EAAO,C,SAACP,E,MAAUC,MAEnBA,OAxBM,CACXQ,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAAWC,IACpCA,EAAMC,kBAuBR,SAAwBC,GACtB,IAAIN,KAACA,GAAQM,EAEb,MAAMC,EAAWP,EAAKO,SAChBC,EAASC,SAASF,EAAiB,OAAEG,MAAO,IAC5CC,EAAQF,SAASF,EAAgB,MAAEG,MAAO,IAC1CE,EAAOH,SAASF,EAAe,KAAEG,MAAO,IAE9C,IAAIG,EAAeF,EAEnB,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAQM,IAC1BxB,EAAcwB,EAAI,EAAGD,GACpBE,MAAMC,IACL,MAAMzB,SAACA,EAAQC,MAAEA,GAASwB,EAC1BC,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAW,CAEvED,SAAU,YACV6B,QAAS,IACTC,kBAAmB,WACnBC,qBAAsB,cAGvBC,OAAOP,IACN,MAAMzB,SAACA,EAAQC,MAAEA,GAASwB,EAC1BC,EAAA7B,GAAS8B,OAAOM,QAAQ,sBAAoBjC,QAAeC,MAAW,CAEpED,SAAU,YACV6B,QAAS,IACTC,kBAAmB,WACnBC,qBAAsB,cAG5BT,GAAgBD,EAjDlBa,CAJa,CACXzB,KAAMI,EAAMsB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const data = {\n    form: event.currentTarget\n  };\n\n  makingPromises(data);\n});\n\nfunction createPromise(position, delay) { //creating a resolve/reject logic, and randomize a solution about sucsess\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      };\n    }, delay);\n  });\n};\n\nfunction makingPromises(data){  //making promises chain from user input, delaing it, and making a notification\n  let {form} = data;\n \n  const elements = form.elements;\n  const amount = parseInt(elements['amount'].value, 10);\n  const delay = parseInt(elements['delay'].value, 10);\n  const step = parseInt(elements['step'].value, 10);\n\n  let currentDelay = delay;\n  \n  for (let i = 0; i < amount; i++){\n    createPromise(i + 1, currentDelay)\n    .then((data) => {\n      const {position, delay} = data;\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`,\n      { \n        position: 'top-right',\n        timeout: 2000, \n        cssAnimationStyle: 'from-top',\n        fontAwesomeIconStyle: 'shadow', \n      });\n      })\n      .catch((data) => {\n        const {position, delay} = data;\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,\n        { \n          position: 'top-right',\n          timeout: 2000, \n          cssAnimationStyle: 'from-top',\n          fontAwesomeIconStyle: 'shadow', \n        });\n      });\n    currentDelay += step;\n  };\n};\n\n"],"names":["$4vA6L","parcelRequire","$75aa520dfb7f3d3e$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","data1","elements","amount","parseInt","value","delay1","step","currentDelay","i","then","data","$parcel$interopDefault","Notify","success","timeout","cssAnimationStyle","fontAwesomeIconStyle","catch","failure","$75aa520dfb7f3d3e$var$makingPromises","currentTarget"],"version":3,"file":"03-promises.9f6c646f.js.map"}